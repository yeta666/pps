<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yeta.pps.mapper.MyStorageMapper" >

    <!--收/发货单-->

    <insert id="addStorageOrder" parameterType="com.yeta.pps.vo.StorageOrderVo">
        insert into
            storage_order_${storeId} (id, type, create_time, apply_order_id, order_status, quantity, logistics_company, waybill_number, user_id, remark)
        values
            (#{id}, #{type}, #{createTime}, #{applyOrderId}, #{orderStatus}, #{quantity}, #{logisticsCompany}, #{waybillNumber}, #{userId}, #{remark});
    </insert>

    <update id="redDashed" parameterType="com.yeta.pps.vo.StorageOrderVo">
        update storage_order_${storeId} set create_time = now(), order_status = -1, user_id = #{userId}, remark = #{remark} where id = #{id} and order_status &gt; 0;
    </update>

    <select id="findCountStorageOrder" parameterType="com.yeta.pps.vo.StorageOrderVo" resultType="java.lang.Integer">
        select
            count(0)
        from
            (
                (
                    storage_order_${storeId} as so
                    left join procurement_apply_order_${storeId} as pao on so.apply_order_id = pao.id
                )
              left join supplier_${storeId} as s on pao.supplier_id = s.id
            )
        left join user_${storeId} as u on so.user_id = u.id
        where
            so.type = #{type}
        <if test="id != null">
        and
            pro.id = #{id}
        </if>
        <if test="procurementApplyOrderVo.supplierName != null">
        and
            s.name like concat('%', #{procurementApplyOrderVo.supplierName}, '%')
        </if>
        <if test="procurementApplyOrderVo.startTime != null and procurementApplyOrderVo.endTime != null">
        and
            date(so.create_time) between #{procurementApplyOrderVo.startTime} and #{procurementApplyOrderVo.endTime}
        </if>
        order by
            so.create_time desc
    </select>

    <resultMap id="storageOrderVoMap" type="com.yeta.pps.vo.StorageOrderVo">
        <id column="id" property="id" />
        <result column="type" property="type" />
        <result column="create_time" property="createTime" />
        <result column="apply_order_id" property="applyOrderId" />
        <result column="order_status" property="orderStatus" />
        <result column="quantity" property="quantity" />
        <result column="logistics_company" property="logisticsCompany" />
        <result column="waybill_number" property="waybillNumber" />
        <result column="user_name" property="userName" />
        <result column="remark" property="remark" />
        <collection property="procurementApplyOrderVo" ofType="com.yeta.pps.vo.ProcurementApplyOrderVo">
            <result column="supplier_name" property="supplierName" />
            <result column="in_warehouse_id" property="inWarehouseId" />
            <result column="out_warehouse_id" property="outWarehouseId" />
        </collection>
    </resultMap>

    <select id="findAllPagedStorageOrder" resultMap="storageOrderVoMap">
        select
            so.id,
            so.type,
            so.create_time,
            so.apply_order_id,
            so.order_status,
            s.name as supplier_name,
            pao.in_warehouse_id,
            pao.out_warehouse_id,
            so.quantity,
            so.logistics_company,
            so.waybill_number,
            u.name as user_name,
            so.remark as remark
        from
            (
                (
                    storage_order_${storageOrderVo.storeId} as so
                    left join procurement_apply_order_${storageOrderVo.storeId} as pao on so.apply_order_id = pao.id
                )
                left join supplier_${storageOrderVo.storeId} as s on pao.supplier_id = s.id
            )
        left join user_${storageOrderVo.storeId} as u on so.user_id = u.id
        where
            so.type = #{storageOrderVo.type}
        <if test="storageOrderVo.id != null">
        and
            pro.id = #{storageOrderVo.id}
        </if>
        <if test="storageOrderVo.procurementApplyOrderVo.supplierName != null">
        and
            s.name like concat('%', #{storageOrderVo.procurementApplyOrderVo.supplierName}, '%')
        </if>
        <if test="storageOrderVo.procurementApplyOrderVo.startTime != null and storageOrderVo.procurementApplyOrderVo.endTime != null">
        and
            date(so.create_time) between #{storageOrderVo.procurementApplyOrderVo.startTime} and #{storageOrderVo.procurementApplyOrderVo.endTime}
        </if>
        order by
            so.create_time desc
        limit
            #{pageVo.start}, #{pageVo.pageSize};
    </select>

    <select id="findStorageOrderById" parameterType="com.yeta.pps.vo.StorageOrderVo" resultType="com.yeta.pps.vo.StorageOrderVo">
        select id, type, create_time, apply_order_id, order_status, quantity, logistics_company, waybill_number, user_id, remark from storage_order_${storeId} where id = #{id};
    </select>

    <!--其他入/出库单-->

    <insert id="addStorageResultOrder" parameterType="com.yeta.pps.vo.StorageResultOrderVo">
        insert into
            storage_result_order_${storeId} (id, type, create_time, order_status, target_type, target_id, warehouse_id, total_quantity, total_money, user_id, remark)
        values
            (#{id}, #{type}, #{createTime}, #{orderStatus}, #{targetType}, #{targetId}, #{warehouseId}, #{totalQuantity}, #{totalMoney}, #{userId}, #{remark});
    </insert>

    <update id="redDashedStorageResultOrder" parameterType="com.yeta.pps.vo.StorageResultOrderVo">
        update storage_result_order_${storeId} set create_time = now(), order_status = -1, user_id = #{userId}, remark = #{remark} where id = #{id} and order_status &gt; 0;
    </update>

    <select id="findCountStorageResultOrder" parameterType="com.yeta.pps.vo.StorageResultOrderVo" resultType="java.lang.Integer">
        select
            count(0)
        from
            (
                (
                    (
                        storage_result_order_${storeId} as sro
                        left join warehouse_${storeId} as w on sro.warehouse_id = w.id
                    )
                    left join user_${storeId} as u on sro.user_id = u.id
                )
                left join supplier_${storeId} as s on sro.target_id = s.id
            )
        left join client as c on sro.target_id = c.id
        where 1 = 1
        <if test="id != null">
            and sro.id = #{id}
        </if>
        <if test="type != null">
            and sro.type = #{type}
        </if>
        <if test="targetName != null">
            and (c.name like concat('%', #{targetName}, '%') or s.name like concat('%', #{targetName}, '%'))
        </if>
        <if test="startTime != null and endTime != null">
            and date(sro.create_time) between #{startTime} and #{endTime}
        </if>
        order by sro.create_time desc;
    </select>

    <select id="findAllPagedStorageResultOrder" resultType="com.yeta.pps.vo.StorageResultOrderVo">
        select
            sro.id,
            sro.type,
            sro.create_time,
            sro.order_status,
            sro.target_type,
            sro.target_id,
            c.name as client_name,
            s.name as supplier_name,
            sro.warehouse_id,
            w.name as warehouse_name,
            sro.total_quantity,
            sro.total_money,
            sro.user_id,
            u.name as u_name,
            sro.remark
        from
            (
                (
                    (
                        storage_result_order_${vo.storeId} as sro
                        left join warehouse_${vo.storeId} as w on sro.warehouse_id = w.id
                    )
                    left join user_${vo.storeId} as u on sro.user_id = u.id
                )
                left join supplier_${vo.storeId} as s on sro.target_id = s.id
            )
        left join client as c on sro.target_id = c.id
        where 1 = 1
        <if test="vo.id != null">
            and sro.id = #{vo.id}
        </if>
        <if test="vo.type != null">
            and sro.type = #{vo.type}
        </if>
        <if test="vo.targetName != null">
            and (c.name like concat('%', #{vo.targetName}, '%') or s.name like concat('%', #{vo.targetName}, '%'))
        </if>
        <if test="vo.startTime != null and vo.endTime != null">
            and date(sro.create_time) between #{vo.startTime} and #{vo.endTime}
        </if>
        order by sro.create_time desc
        limit #{pageVo.start}, #{pageVo.pageSize};
    </select>

    <resultMap id="storageResultOrderVoMap2" type="com.yeta.pps.vo.StorageResultOrderVo">
        <id column="id" property="id" />
        <result column="type" property="type" />
        <result column="create_time" property="createTime" />
        <result column="target_type" property="targetType" />
        <result column="target_id" property="targetId" />
        <result column="client_name" property="clientName" />
        <result column="supplier_name" property="supplierName" />
        <result column="order_status" property="orderStatus" />
        <result column="warehouse_id" property="warehouseId" />
        <result column="warehouse_name" property="warehouseName" />
        <result column="total_quantity" property="totalQuantity" />
        <result column="total_money" property="totalMoney" />
        <result column="user_id" property="userId" />
        <result column="user_name" property="userName" />
        <result column="remark" property="remark" />
        <collection property="details" ofType="com.yeta.pps.vo.OrderGoodsSkuVo">
            <result column="ogs_id" property="id" />
            <result column="ogs_type" property="type" />
            <result column="ogs_goods_sku_id" property="goodsSkuId" />
            <result column="ogs_quantity" property="quantity" />
            <result column="ogs_finish_quantity" property="finishQuantity" />
            <result column="ogs_not_finish_quantity" property="notFinishQuantity" />
            <result column="ogs_money" property="money" />
            <result column="ogs_discount_money" property="discountMoney" />
            <result column="ogs_remark" property="remark" />
            <result column="g_name" property="goodsName" />
            <result column="g_id" property="goodsId" />
            <result column="g_bar_code" property="goodsBarCode" />
            <result column="gs_sku" property="goodsSkuSku" />
            <result column="gs_purchase_price" property="goodsSkuPurchasePrice" />
        </collection>
    </resultMap>

    <select id="findStorageResultOrderDetailById" parameterType="com.yeta.pps.vo.StorageResultOrderVo" resultMap="storageResultOrderVoMap2">
        select
            sro.id,
            sro.type,
            sro.create_time,
            sro.order_status,
            sro.target_type,
            sro.target_id,
            c.name as client_name,
            s.name as supplier_name,
            sro.warehouse_id,
            w.name as warehouse_name,
            sro.total_quantity,
            sro.total_money,
            sro.user_id,
            u.name as u_name,
            sro.remark,
            ogs.id as ogs_id,
            ogs.type as ogs_type,
            ogs.goods_sku_id as ogs_goods_sku_id,
            ogs.quantity as ogs_quantity,
            ogs.finish_quantity as ogs_finish_quantity,
            ogs.not_finish_quantity as ogs_not_finish_quantity,
            ogs.money as ogs_money,
            ogs.discount_money as ogs_discount_money,
            ogs.remark as ogs_remark,
            g.name as g_name,
            g.id as g_id,
            g.bar_code as g_bar_code,
            gs.sku as gs_sku,
            gs.purchase_price as gs_purchase_price
        from
            (
                (
                    (
                        (
                            (
                                (
                                    storage_result_order_${storeId} as sro
                                    left join warehouse_${storeId} as w on sro.warehouse_id = w.id
                                )
                                left join user_${storeId} as u on sro.user_id = u.id
                            )
                            left join supplier_${storeId} as s on sro.target_id = s.id
                        )
                        left join client as c on sro.target_id = c.id
                    )
                    left join order_goods_sku_${storeId} as ogs on sro.id = ogs.order_id
                )
                left join goods_sku_${storeId} as gs on ogs.goods_sku_id = gs.id
            )
        left join goods_${storeId} as g on gs.goods_id = g.id
        where
            sro.id = #{id};
    </select>

    <!--查库存-->

    <select id="findCountCurrentInventory" parameterType="com.yeta.pps.vo.GoodsWarehouseSkuVo" resultType="java.lang.Integer">
        select
            count(*)
        from
            (
                select
                    count(*)
                from
                    (
                        (
                            (
                                goods_${storeId} as g
                                inner join goods_sku_${storeId} as gs on g.id = gs.goods_id
                            )
                            inner join warehouse_goods_sku_${storeId} as wgs on gs.id = wgs.goods_sku_id
                        )
                        inner join warehouse_${storeId} as w on w.id = wgs.warehouse_id
                    )
                inner join goods_type_${storeId} as gt on g.type_id = gt.id
                where
                    wgs.opening_quantity &gt; 0
                and wgs.opening_money &gt; 0
                and wgs.opening_total_money &gt; 0
                <if test="id != null">
                    and g.id like concat('%', #{id}, '%')
                </if>
                <if test="name != null">
                    and g.name like concat('%', #{name}, '%')
                </if>
                <if test="typeId != null">
                    and g.type_id = #{typeId}
                </if>
                group by g.id
            ) as temp;
    </select>

    <select id="findPagedCurrentInventory" resultType="com.yeta.pps.vo.GoodsWarehouseSkuVo">
        select
            g.id,
            g.name,
            g.bar_code,
            gt.name as type_name,
            g.image,
            sum(wgs.real_inventory) as real_inventory,
            sum(wgs.not_sent_quantity) as not_sent_quantity,
            sum(wgs.not_received_quantity) as not_received_quantity,
            sum(wgs.can_use_inventory) as can_use_inventory,
            sum(wgs.book_inventory) as book_inventory
        from 
            (
                (
                    (
                        goods_${vo.storeId} as g
                        inner join goods_sku_${vo.storeId} as gs on g.id = gs.goods_id
                    )
                    inner join warehouse_goods_sku_${vo.storeId} as wgs on gs.id = wgs.goods_sku_id
                )
                inner join warehouse_${vo.storeId} as w on w.id = wgs.warehouse_id
            )
        inner join goods_type_${vo.storeId} as gt on g.type_id = gt.id
        where
            wgs.opening_quantity &gt; 0
        and wgs.opening_money &gt; 0
        and wgs.opening_total_money &gt; 0
        <if test="vo.id != null">
            and g.id like concat('%', #{vo.id}, '%')
        </if>
        <if test="vo.name != null">
            and g.name like concat('%', #{vo.name}, '%')
        </if>
        <if test="vo.typeId != null">
            and g.type_id = #{vo.typeId}
        </if>
        group by g.id
        limit #{pageVo.start}, #{pageVo.pageSize};
    </select>

    <select id="findCountDistributionByGoodsId" parameterType="com.yeta.pps.vo.GoodsWarehouseSkuVo" resultType="java.lang.Integer">
        select
            count(*)
        from
        (
            select
                count(*)
            from
                (
                    (
                        (
                            goods_${storeId} as g
                            inner join goods_sku_${storeId} as gs on g.id = gs.goods_id
                        )
                        inner join warehouse_goods_sku_${storeId} as wgs on gs.id = wgs.goods_sku_id
                    )
                    inner join warehouse_${storeId} as w on w.id = wgs.warehouse_id
                )
            inner join goods_type_${storeId} as gt on g.type_id = gt.id
            where
                g.id = #{id}
            and wgs.opening_quantity &gt; 0
            and wgs.opening_money &gt; 0
            and wgs.opening_total_money &gt; 0
            group by w.id
        ) as temp;
    </select>

    <select id="findPagedDistributionByGoodsId" resultType="com.yeta.pps.vo.GoodsWarehouseSkuVo">
        select
            g.id,
            g.name,
            g.bar_code,
            w.name as warehouse_name,
            sum(wgs.real_inventory) as real_inventory,
            sum(wgs.not_sent_quantity) as not_sent_quantity,
            sum(wgs.not_received_quantity) as not_received_quantity,
            sum(wgs.can_use_inventory) as can_use_inventory,
            sum(wgs.book_inventory) as book_inventory
        from
            (
                (
                    (
                        goods_${vo.storeId} as g
                        inner join goods_sku_${vo.storeId} as gs on g.id = gs.goods_id
                    )
                    inner join warehouse_goods_sku_${vo.storeId} as wgs on gs.id = wgs.goods_sku_id
                )
                inner join warehouse_${vo.storeId} as w on w.id = wgs.warehouse_id
            )
        inner join goods_type_${vo.storeId} as gt on g.type_id = gt.id
        where
            g.id = #{vo.id}
        and wgs.opening_quantity &gt; 0
        and wgs.opening_money &gt; 0
        and wgs.opening_total_money &gt; 0
        group by w.id
        limit #{pageVo.start}, #{pageVo.pageSize};
    </select>

    <select id="findCountOrderByGoodsId" parameterType="com.yeta.pps.vo.StorageCheckOrderVo" resultType="java.lang.Integer">
        select
            count(0)
        from
            (
                (
                    (
                        (
                            (
                                (
                                    (
                                        storage_check_order_${storeId} as sco
                                        left join procurement_result_order_${storeId} as pro on pro.id = sco.order_id
                                    )
                                    left join sell_result_order_${storeId} as sro on sro.id = sco.order_id
                                )
                                left join storage_result_order_${storeId} as sro1 on sro1.id = sco.order_id
                            )
                            left join goods_sku_${storeId} as gs on gs.id = sco.goods_sku_id
                        )
                        left join goods_${storeId} as g on g.id = gs.goods_id
                    )
                    left join supplier_${storeId} as s on s.id = sco.target_id
                )
                left join client as c on c.id = sco.target_id
            )
        left join user_${storeId} as u on u.id = sco.user_id
        where 1 = 1
        <if test="goodsId != null">
            and g.id = #{goodsId}
        </if>
        <if test="goodsSkuId != null">
            and sco.goods_sku_id = #{goodsSkuId}
        </if>
        order by sco.create_time asc;
    </select>

    <select id="findPagedOrderByGoodsId" resultType="com.yeta.pps.vo.StorageCheckOrderVo">
        select 
            sco.order_id,
            if (
                pro.type = 1,
                '采购入库单',
            if (
                pro.type = 2,
                '采购退货单',
            if (
                pro.type = 3,
                '采购换货单',
            if (
                sro.type = 1,
                '零售单',
            if (
                sro.type = 2,
                '销售出库单',
            if (
                sro.type = 3,
                '销售退货单',
            if (
                sro.type = 4,
                '销售换货单',
            if (
                sro1.type = 1,
                '其他入库单',
            if (
                sro1.type = 2,
                '其他出库单',
            if (
                sro1.type = 3,
                '报溢单',
            if (
                sro1.type = 4,
                '报损单',
                null
            ))))))))))) as type_name,
            sco.create_time,
            if (
                pro.apply_order_id is not null,
                pro.apply_order_id,
            if (
                sro.apply_order_id is not null,
                sro.apply_order_id,
                null 
            )) as apply_order_id,
            if (
                c.name is not null,
                c.name,
                s.name
            ) as target_name,
            gs.sku as sku,
            sco.in_warehouse_id,
            sco.in_quantity,
            sco.in_money,
            sco.in_total_money,
            sco.out_warehouse_id,
            sco.out_quantity,
            sco.out_money,
            sco.out_total_money,
            sco.check_quantity,
            sco.check_money,
            sco.check_total_money,
            u.name as user_name,
            if (
                pro.remark is not null,
                pro.remark,
            if (
                sro.remark is not null,
                sro.remark,
            if (
                sro1.remark is not null,
                sro1.remark,
                null
            ))) as remark
        from 
            (
                (
                    (
                        (
                            (
                                (
                                    (
                                        storage_check_order_${vo.storeId} as sco
                                        left join procurement_result_order_${vo.storeId} as pro on pro.id = sco.order_id
                                    )
                                    left join sell_result_order_${vo.storeId} as sro on sro.id = sco.order_id
                                )
                                left join storage_result_order_${vo.storeId} as sro1 on sro1.id = sco.order_id
                            )
                            left join goods_sku_${vo.storeId} as gs on gs.id = sco.goods_sku_id
                        )
                        left join goods_${vo.storeId} as g on g.id = gs.goods_id
                    )
                    left join supplier_${vo.storeId} as s on s.id = sco.target_id
                )
                left join client as c on c.id = sco.target_id
            )
        left join user_${vo.storeId} as u on u.id = sco.user_id
        where 1 = 1
        <if test="vo.goodsId != null">
            and g.id = #{vo.goodsId}
        </if>
        <if test="vo.goodsSkuId != null">
            and sco.goods_sku_id = #{vo.goodsSkuId}
        </if>
        order by sco.create_time asc
        limit #{pageVo.start}, #{pageVo.pageSize};
    </select>

    <select id="findCountSkuByGoodsId" parameterType="com.yeta.pps.vo.GoodsWarehouseSkuVo" resultType="java.lang.Integer">
        select
            count(*)
        from
            (
                select
                    count(*)
                from
                    (
                        (
                            (
                                goods_${storeId} as g
                                inner join goods_sku_${storeId} as gs on g.id = gs.goods_id
                            )
                            inner join warehouse_goods_sku_${storeId} as wgs on gs.id = wgs.goods_sku_id
                        )
                        inner join warehouse_${storeId} as w on w.id = wgs.warehouse_id
                    )
                inner join goods_type_${storeId} as gt on g.type_id = gt.id
                where
                    g.id = #{id}
                and wgs.opening_quantity &gt; 0
                and wgs.opening_money &gt; 0
                and wgs.opening_total_money &gt; 0
                group by gs.id
            ) as temp;
    </select>

    <select id="findPagedSkuByGoodsId" resultType="com.yeta.pps.vo.GoodsWarehouseSkuVo">
        select
            g.id,
            g.name,
            g.bar_code,
            gs.sku,
            sum(wgs.real_inventory) as real_inventory,
            sum(wgs.not_sent_quantity) as not_sent_quantity,
            sum(wgs.not_received_quantity) as not_received_quantity,
            sum(wgs.can_use_inventory) as can_use_inventory,
            sum(wgs.book_inventory) as book_inventory
        from
            (
                (
                    (
                        goods_${vo.storeId} as g
                        inner join goods_sku_${vo.storeId} as gs on g.id = gs.goods_id
                    )
                    inner join warehouse_goods_sku_${vo.storeId} as wgs on gs.id = wgs.goods_sku_id
                )
                inner join warehouse_${vo.storeId} as w on w.id = wgs.warehouse_id
            )
        inner join goods_type_${vo.storeId} as gt on g.type_id = gt.id
        where
            g.id = #{vo.id}
        and wgs.opening_quantity &gt; 0
        and wgs.opening_money &gt; 0
        and wgs.opening_total_money &gt; 0
        group by gs.id
        limit #{pageVo.start}, #{pageVo.pageSize};
    </select>

    <select id="findCountBySku" parameterType="com.yeta.pps.vo.GoodsWarehouseSkuVo" resultType="java.lang.Integer">
        select
            count(*)
        from
            (
                select
                    count(*)
                from
                    (
                        (
                            (
                                goods_${storeId} as g
                                inner join goods_sku_${storeId} as gs on g.id = gs.goods_id
                            )
                            inner join warehouse_goods_sku_${storeId} as wgs on gs.id = wgs.goods_sku_id
                        )
                        inner join warehouse_${storeId} as w on w.id = wgs.warehouse_id
                    )
                inner join goods_type_${storeId} as gt on g.type_id = gt.id
                where
                    wgs.opening_quantity &gt; 0
                and wgs.opening_money &gt; 0
                and wgs.opening_total_money &gt; 0
                <if test="id != null">
                    and g.id like concat('%', #{id}, '%')
                </if>
                <if test="name != null">
                    and g.name like concat('%', #{name}, '%')
                </if>
                <if test="typeId != null">
                    and g.type_id = #{typeId}
                </if>
                group by gs.id
            ) as temp;
    </select>

    <select id="findPagedBySku" resultType="com.yeta.pps.vo.GoodsWarehouseSkuVo">
        SELECT
            g.id,
            g.name,
            g.bar_code,
            gt.name as type_name,
            g.image,
            gs.id as goods_sku_id,
            gs.sku,
            sum(wgs.real_inventory) as real_inventory,
            sum(wgs.not_sent_quantity) as not_sent_quantity,
            sum(wgs.not_received_quantity) as not_received_quantitym,
            sum(wgs.can_use_inventory) as can_use_inventory,
            sum(wgs.book_inventory) as book_inventory
        FROM
            (
                (
                    (
                        goods_${vo.storeId} as g
                        inner join goods_sku_${vo.storeId} as gs on g.id = gs.goods_id
                    )
                    inner join warehouse_goods_sku_${vo.storeId} as wgs on gs.id = wgs.goods_sku_id
                )
                inner join warehouse_${vo.storeId} as w on w.id = wgs.warehouse_id
            )
        inner join goods_type_${vo.storeId} as gt on g.type_id = gt.id
        where
            wgs.opening_quantity &gt; 0
        and wgs.opening_money &gt; 0
        and wgs.opening_total_money &gt; 0
        <if test="vo.id != null">
            and g.id like concat('%', #{vo.id}, '%')
        </if>
        <if test="vo.name != null">
            and g.name like concat('%', #{vo.name}, '%')
        </if>
        <if test="vo.typeId != null">
            and g.type_id = #{vo.typeId}
        </if>
        group by gs.id
        limit #{pageVo.start}, #{pageVo.pageSize};
    </select>

    <select id="findCountByWarehouse" parameterType="com.yeta.pps.vo.GoodsWarehouseSkuVo" resultType="java.lang.Integer">
        select
            count(*)
        from
            (
                (
                    (
                        goods_${storeId} as g
                        inner join goods_sku_${storeId} as gs on g.id = gs.goods_id
                    )
                    inner join warehouse_goods_sku_${storeId} as wgs on gs.id = wgs.goods_sku_id
                )
                inner join warehouse_${storeId} as w on w.id = wgs.warehouse_id
            )
        inner join goods_type_${storeId} as gt on g.type_id = gt.id
        where 1 = 1
        <if test="id != null">
            and g.id like concat('%', #{id}, '%')
        </if>
        <if test="name != null">
            and g.name like concat('%', #{name}, '%')
        </if>
        <if test="typeId != null">
            and g.type_id = #{typeId}
        </if>
        <if test="warehouseId != null">
            and w.id = #{warehouseId}
        </if>
        <if test="flag == 2">
            and wgs.book_inventory &gt;= wgs.inventory_upper_limit or wgs.book_inventory &lt;= wgs.inventory_low_limit
        </if>
        <if test="flag == 3">
            and wgs.inventory_low_limit + wgs.not_sent_quantity - wgs.real_inventory - wgs.not_received_quantity &gt; 0
        </if>
        <if test="flag != 4">
            and wgs.opening_quantity &gt; 0 and wgs.opening_money &gt; 0 and wgs.opening_total_money &gt; 0
        </if>
    </select>

    <select id="findPagedByWarehouse" resultType="com.yeta.pps.vo.GoodsWarehouseSkuVo">
        select
            g.id,
            g.name,
            g.bar_code,
            gt.name as type_name,
            g.image,
            gs.id as goods_sku_id,
            gs.sku,
            gs.goods_id,
            w.id as warehouse_id,
            w.name as warehouse_name,
            wgs.real_inventory,
            wgs.not_sent_quantity,
            wgs.not_received_quantity,
            wgs.can_use_inventory,
            wgs.book_inventory,
            wgs.inventory_upper_limit,
            wgs.inventory_low_limit,
            wgs.inventory_low_limit + wgs.not_sent_quantity - wgs.real_inventory - wgs.not_received_quantity as need_quantity,
            wgs.opening_quantity,
            wgs.opening_money,
            wgs.opening_total_money
        from
            (
                (
                    (
                        goods_${vo.storeId} as g
                        inner join goods_sku_${vo.storeId} as gs on g.id = gs.goods_id
                    )
                    inner join warehouse_goods_sku_${vo.storeId} as wgs on gs.id = wgs.goods_sku_id
                )
                inner join warehouse_${vo.storeId} as w on w.id = wgs.warehouse_id
            )
        inner join goods_type_${vo.storeId} as gt on g.type_id = gt.id
        where 1 = 1
        <if test="vo.id != null">
            and g.id like concat('%', #{vo.id}, '%')
        </if>
        <if test="vo.name != null">
            and g.name like concat('%', #{vo.name}, '%')
        </if>
        <if test="vo.typeId != null">
            and g.type_id = #{vo.typeId}
        </if>
        <if test="vo.warehouseId != null">
            and w.id = #{vo.warehouseId}
        </if>
        <if test="vo.flag == 2">
            and wgs.book_inventory &gt;= wgs.inventory_upper_limit or wgs.book_inventory &lt;= wgs.inventory_low_limit
        </if>
        <if test="vo.flag == 3">
            and wgs.inventory_low_limit + wgs.not_sent_quantity - wgs.real_inventory - wgs.not_received_quantity &gt; 0
        </if>
        <if test="vo.flag != 4">
            and wgs.opening_quantity &gt; 0 and wgs.opening_money &gt; 0 and wgs.opening_total_money &gt; 0
        </if>
        limit #{pageVo.start}, #{pageVo.pageSize};
    </select>

    <!--库存对账-->

    <insert id="addStorageCheckOrder" parameterType="com.yeta.pps.vo.StorageCheckOrderVo">
        insert into
            storage_check_order_${storeId} (order_id, create_time, target_id, goods_sku_id, in_warehouse_id, in_quantity, in_money, in_total_money, out_warehouse_id, out_quantity, out_money, out_total_money, check_quantity, check_money, check_total_money, user_id)
        values (#{orderId}, #{createTime}, #{targetId}, #{goodsSkuId}, #{inWarehouseId}, #{inQuantity}, #{inMoney}, #{inTotalMoney}, #{outWarehouseId}, #{outQuantity}, #{outMoney}, #{outTotalMoney}, #{checkQuantity}, #{checkMoney}, #{checkTotalMoney}, #{userId});
    </insert>

    <select id="findLastCheckMoney" parameterType="com.yeta.pps.vo.StorageCheckOrderVo" resultType="com.yeta.pps.vo.StorageCheckOrderVo">
        select
            order_id, create_time, target_id, goods_sku_id, in_warehouse_id, in_quantity, in_money, in_total_money, out_warehouse_id, out_quantity, out_money, out_total_money, check_quantity, check_money, check_total_money, user_id
        from
            storage_check_order_${storeId}
        where
            goods_sku_id = #{goodsSkuId}
        order by
            create_time desc
        limit 1;
    </select>
</mapper>